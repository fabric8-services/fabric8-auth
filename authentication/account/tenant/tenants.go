// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "tenant": tenants Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-tenant/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/authentication/account
// --pkg=tenant
// --version=v1.3.0

package tenant

import (
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// DeleteTenantsPath computes a request path to the delete action of tenants.
func DeleteTenantsPath(tenantID uuid.UUID) string {
	param0 := tenantID.String()

	return fmt.Sprintf("/api/tenants/%s", param0)
}

// delete/deprovision a single tenant environment.
func (c *Client) DeleteTenants(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteTenantsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteTenantsRequest create the request corresponding to the delete action endpoint of the tenants resource.
func (c *Client) NewDeleteTenantsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// SearchTenantsPath computes a request path to the search action of tenants.
func SearchTenantsPath() string {

	return fmt.Sprintf("/api/tenants")
}

// Lookup a tenant by cluster/namespace.
func (c *Client) SearchTenants(ctx context.Context, path string, masterURL string, namespace string) (*http.Response, error) {
	req, err := c.NewSearchTenantsRequest(ctx, path, masterURL, namespace)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSearchTenantsRequest create the request corresponding to the search action endpoint of the tenants resource.
func (c *Client) NewSearchTenantsRequest(ctx context.Context, path string, masterURL string, namespace string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("master_url", masterURL)
	values.Set("namespace", namespace)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowTenantsPath computes a request path to the show action of tenants.
func ShowTenantsPath(tenantID uuid.UUID) string {
	param0 := tenantID.String()

	return fmt.Sprintf("/api/tenants/%s", param0)
}

// Show a single tenant environment.
func (c *Client) ShowTenants(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowTenantsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowTenantsRequest create the request corresponding to the show action endpoint of the tenants resource.
func (c *Client) NewShowTenantsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
