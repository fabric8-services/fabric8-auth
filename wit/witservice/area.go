// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": area Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateChildAreaPayload is the area create-child action payload.
type CreateChildAreaPayload struct {
	Data *Area `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// CreateChildAreaPath computes a request path to the create-child action of area.
func CreateChildAreaPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/areas/%s", param0)
}

// create child area.
func (c *Client) CreateChildArea(ctx context.Context, path string, payload *CreateChildAreaPayload) (*http.Response, error) {
	req, err := c.NewCreateChildAreaRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateChildAreaRequest create the request corresponding to the create-child action endpoint of the area resource.
func (c *Client) NewCreateChildAreaRequest(ctx context.Context, path string, payload *CreateChildAreaPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowAreaPath computes a request path to the show action of area.
func ShowAreaPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/areas/%s", param0)
}

// Retrieve area with given id.
func (c *Client) ShowArea(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewShowAreaRequest(ctx, path, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAreaRequest create the request corresponding to the show action endpoint of the area resource.
func (c *Client) NewShowAreaRequest(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	return req, nil
}

// ShowChildrenAreaPath computes a request path to the show-children action of area.
func ShowChildrenAreaPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/areas/%s/children", param0)
}

// Retrieve child areas of given id.
func (c *Client) ShowChildrenArea(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewShowChildrenAreaRequest(ctx, path, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowChildrenAreaRequest create the request corresponding to the show-children action endpoint of the area resource.
func (c *Client) NewShowChildrenAreaRequest(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	return req, nil
}
