// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": space_codebases Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
	"strconv"
)

// CreateSpaceCodebasesPayload is the space_codebases create action payload.
type CreateSpaceCodebasesPayload struct {
	Data *Codebase `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// CreateSpaceCodebasesPath computes a request path to the create action of space_codebases.
func CreateSpaceCodebasesPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/codebases", param0)
}

// Create codebase.
func (c *Client) CreateSpaceCodebases(ctx context.Context, path string, payload *CreateSpaceCodebasesPayload) (*http.Response, error) {
	req, err := c.NewCreateSpaceCodebasesRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateSpaceCodebasesRequest create the request corresponding to the create action endpoint of the space_codebases resource.
func (c *Client) NewCreateSpaceCodebasesRequest(ctx context.Context, path string, payload *CreateSpaceCodebasesPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListSpaceCodebasesPath computes a request path to the list action of space_codebases.
func ListSpaceCodebasesPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/codebases", param0)
}

// List codebases.
func (c *Client) ListSpaceCodebases(ctx context.Context, path string, pageLimit *int, pageOffset *string) (*http.Response, error) {
	req, err := c.NewListSpaceCodebasesRequest(ctx, path, pageLimit, pageOffset)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSpaceCodebasesRequest create the request corresponding to the list action endpoint of the space_codebases resource.
func (c *Client) NewListSpaceCodebasesRequest(ctx context.Context, path string, pageLimit *int, pageOffset *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if pageLimit != nil {
		tmp11 := strconv.Itoa(*pageLimit)
		values.Set("page[limit]", tmp11)
	}
	if pageOffset != nil {
		values.Set("page[offset]", *pageOffset)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
