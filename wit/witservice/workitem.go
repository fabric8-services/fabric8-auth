// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": workitem Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
	"strconv"
)

// DeleteWorkitemPath computes a request path to the delete action of workitem.
func DeleteWorkitemPath(wiID uuid.UUID) string {
	param0 := wiID.String()

	return fmt.Sprintf("/api/workitems/%s", param0)
}

// Delete work item with given its id.
func (c *Client) DeleteWorkitem(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteWorkitemRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteWorkitemRequest create the request corresponding to the delete action endpoint of the workitem resource.
func (c *Client) NewDeleteWorkitemRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListChildrenWorkitemPath computes a request path to the list-children action of workitem.
func ListChildrenWorkitemPath(wiID uuid.UUID) string {
	param0 := wiID.String()

	return fmt.Sprintf("/api/workitems/%s/children", param0)
}

// List children associated with the given work item
func (c *Client) ListChildrenWorkitem(ctx context.Context, path string, pageLimit *int, pageOffset *string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewListChildrenWorkitemRequest(ctx, path, pageLimit, pageOffset, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListChildrenWorkitemRequest create the request corresponding to the list-children action endpoint of the workitem resource.
func (c *Client) NewListChildrenWorkitemRequest(ctx context.Context, path string, pageLimit *int, pageOffset *string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if pageLimit != nil {
		tmp15 := strconv.Itoa(*pageLimit)
		values.Set("page[limit]", tmp15)
	}
	if pageOffset != nil {
		values.Set("page[offset]", *pageOffset)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	return req, nil
}

// ShowWorkitemPath computes a request path to the show action of workitem.
func ShowWorkitemPath(wiID uuid.UUID) string {
	param0 := wiID.String()

	return fmt.Sprintf("/api/workitems/%s", param0)
}

// Retrieve a work item from the given id.
func (c *Client) ShowWorkitem(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewShowWorkitemRequest(ctx, path, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowWorkitemRequest create the request corresponding to the show action endpoint of the workitem resource.
func (c *Client) NewShowWorkitemRequest(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	return req, nil
}

// UpdateWorkitemPayload is the workitem update action payload.
type UpdateWorkitemPayload struct {
	Data *WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// UpdateWorkitemPath computes a request path to the update action of workitem.
func UpdateWorkitemPath(wiID uuid.UUID) string {
	param0 := wiID.String()

	return fmt.Sprintf("/api/workitems/%s", param0)
}

// update the work item with the given natural id.
func (c *Client) UpdateWorkitem(ctx context.Context, path string, payload *UpdateWorkitemPayload) (*http.Response, error) {
	req, err := c.NewUpdateWorkitemRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateWorkitemRequest create the request corresponding to the update action endpoint of the workitem resource.
func (c *Client) NewUpdateWorkitemRequest(ctx context.Context, path string, payload *UpdateWorkitemPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
