// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": trackerquery Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateTrackerqueryPath computes a request path to the create action of trackerquery.
func CreateTrackerqueryPath() string {

	return fmt.Sprintf("/api/trackerqueries")
}

// Add new tracker query.
func (c *Client) CreateTrackerquery(ctx context.Context, path string, payload *CreateTrackerQueryAlternatePayload) (*http.Response, error) {
	req, err := c.NewCreateTrackerqueryRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateTrackerqueryRequest create the request corresponding to the create action endpoint of the trackerquery resource.
func (c *Client) NewCreateTrackerqueryRequest(ctx context.Context, path string, payload *CreateTrackerQueryAlternatePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteTrackerqueryPath computes a request path to the delete action of trackerquery.
func DeleteTrackerqueryPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/trackerqueries/%s", param0)
}

// Delete tracker query
func (c *Client) DeleteTrackerquery(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteTrackerqueryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteTrackerqueryRequest create the request corresponding to the delete action endpoint of the trackerquery resource.
func (c *Client) NewDeleteTrackerqueryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListTrackerqueryPath computes a request path to the list action of trackerquery.
func ListTrackerqueryPath() string {

	return fmt.Sprintf("/api/trackerqueries")
}

// List all tracker queries.
func (c *Client) ListTrackerquery(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTrackerqueryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTrackerqueryRequest create the request corresponding to the list action endpoint of the trackerquery resource.
func (c *Client) NewListTrackerqueryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowTrackerqueryPath computes a request path to the show action of trackerquery.
func ShowTrackerqueryPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/trackerqueries/%s", param0)
}

// Retrieve tracker configuration for the given id.
func (c *Client) ShowTrackerquery(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowTrackerqueryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowTrackerqueryRequest create the request corresponding to the show action endpoint of the trackerquery resource.
func (c *Client) NewShowTrackerqueryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateTrackerqueryPath computes a request path to the update action of trackerquery.
func UpdateTrackerqueryPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/trackerqueries/%s", param0)
}

// Update tracker query.
func (c *Client) UpdateTrackerquery(ctx context.Context, path string, payload *UpdateTrackerQueryAlternatePayload) (*http.Response, error) {
	req, err := c.NewUpdateTrackerqueryRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateTrackerqueryRequest create the request corresponding to the update action endpoint of the trackerquery resource.
func (c *Client) NewUpdateTrackerqueryRequest(ctx context.Context, path string, payload *UpdateTrackerQueryAlternatePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
