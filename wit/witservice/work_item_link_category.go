// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": work_item_link_category Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateWorkItemLinkCategoryPath computes a request path to the create action of work_item_link_category.
func CreateWorkItemLinkCategoryPath() string {

	return fmt.Sprintf("/api/workitemlinkcategories")
}

// Create a work item link category
func (c *Client) CreateWorkItemLinkCategory(ctx context.Context, path string, payload *CreateWorkItemLinkCategoryPayload) (*http.Response, error) {
	req, err := c.NewCreateWorkItemLinkCategoryRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateWorkItemLinkCategoryRequest create the request corresponding to the create action endpoint of the work_item_link_category resource.
func (c *Client) NewCreateWorkItemLinkCategoryRequest(ctx context.Context, path string, payload *CreateWorkItemLinkCategoryPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteWorkItemLinkCategoryPath computes a request path to the delete action of work_item_link_category.
func DeleteWorkItemLinkCategoryPath(id uuid.UUID) string {
	param0 := id.String()

	return fmt.Sprintf("/api/workitemlinkcategories/%s", param0)
}

// Delete work item link category with given id.
func (c *Client) DeleteWorkItemLinkCategory(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteWorkItemLinkCategoryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteWorkItemLinkCategoryRequest create the request corresponding to the delete action endpoint of the work_item_link_category resource.
func (c *Client) NewDeleteWorkItemLinkCategoryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListWorkItemLinkCategoryPath computes a request path to the list action of work_item_link_category.
func ListWorkItemLinkCategoryPath() string {

	return fmt.Sprintf("/api/workitemlinkcategories")
}

// List work item link categories.
func (c *Client) ListWorkItemLinkCategory(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListWorkItemLinkCategoryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListWorkItemLinkCategoryRequest create the request corresponding to the list action endpoint of the work_item_link_category resource.
func (c *Client) NewListWorkItemLinkCategoryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowWorkItemLinkCategoryPath computes a request path to the show action of work_item_link_category.
func ShowWorkItemLinkCategoryPath(id uuid.UUID) string {
	param0 := id.String()

	return fmt.Sprintf("/api/workitemlinkcategories/%s", param0)
}

// Retrieve work item link category (as JSONAPI) for the given ID.
func (c *Client) ShowWorkItemLinkCategory(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowWorkItemLinkCategoryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowWorkItemLinkCategoryRequest create the request corresponding to the show action endpoint of the work_item_link_category resource.
func (c *Client) NewShowWorkItemLinkCategoryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateWorkItemLinkCategoryPath computes a request path to the update action of work_item_link_category.
func UpdateWorkItemLinkCategoryPath(id uuid.UUID) string {
	param0 := id.String()

	return fmt.Sprintf("/api/workitemlinkcategories/%s", param0)
}

// Update the given work item link category with given id.
func (c *Client) UpdateWorkItemLinkCategory(ctx context.Context, path string, payload *UpdateWorkItemLinkCategoryPayload) (*http.Response, error) {
	req, err := c.NewUpdateWorkItemLinkCategoryRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateWorkItemLinkCategoryRequest create the request corresponding to the update action endpoint of the work_item_link_category resource.
func (c *Client) NewUpdateWorkItemLinkCategoryRequest(ctx context.Context, path string, payload *UpdateWorkItemLinkCategoryPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
