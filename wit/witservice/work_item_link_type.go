// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": work_item_link_type Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateWorkItemLinkTypePath computes a request path to the create action of work_item_link_type.
func CreateWorkItemLinkTypePath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/workitemlinktypes", param0)
}

// Create a work item link type
func (c *Client) CreateWorkItemLinkType(ctx context.Context, path string, payload *CreateWorkItemLinkTypePayload) (*http.Response, error) {
	req, err := c.NewCreateWorkItemLinkTypeRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateWorkItemLinkTypeRequest create the request corresponding to the create action endpoint of the work_item_link_type resource.
func (c *Client) NewCreateWorkItemLinkTypeRequest(ctx context.Context, path string, payload *CreateWorkItemLinkTypePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteWorkItemLinkTypePath computes a request path to the delete action of work_item_link_type.
func DeleteWorkItemLinkTypePath(spaceID uuid.UUID, wiltID uuid.UUID) string {
	param0 := spaceID.String()
	param1 := wiltID.String()

	return fmt.Sprintf("/api/spaces/%s/workitemlinktypes/%s", param0, param1)
}

// Delete work item link type with given id.
func (c *Client) DeleteWorkItemLinkType(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteWorkItemLinkTypeRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteWorkItemLinkTypeRequest create the request corresponding to the delete action endpoint of the work_item_link_type resource.
func (c *Client) NewDeleteWorkItemLinkTypeRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListWorkItemLinkTypePath computes a request path to the list action of work_item_link_type.
func ListWorkItemLinkTypePath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/workitemlinktypes", param0)
}

// List work item link types.
func (c *Client) ListWorkItemLinkType(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewListWorkItemLinkTypeRequest(ctx, path, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListWorkItemLinkTypeRequest create the request corresponding to the list action endpoint of the work_item_link_type resource.
func (c *Client) NewListWorkItemLinkTypeRequest(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	return req, nil
}

// ShowWorkItemLinkTypePath computes a request path to the show action of work_item_link_type.
func ShowWorkItemLinkTypePath(spaceID uuid.UUID, wiltID uuid.UUID) string {
	param0 := spaceID.String()
	param1 := wiltID.String()

	return fmt.Sprintf("/api/spaces/%s/workitemlinktypes/%s", param0, param1)
}

// Retrieve work item link type (as JSONAPI) for the given link ID.
func (c *Client) ShowWorkItemLinkType(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewShowWorkItemLinkTypeRequest(ctx, path, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowWorkItemLinkTypeRequest create the request corresponding to the show action endpoint of the work_item_link_type resource.
func (c *Client) NewShowWorkItemLinkTypeRequest(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	return req, nil
}

// UpdateWorkItemLinkTypePath computes a request path to the update action of work_item_link_type.
func UpdateWorkItemLinkTypePath(spaceID uuid.UUID, wiltID uuid.UUID) string {
	param0 := spaceID.String()
	param1 := wiltID.String()

	return fmt.Sprintf("/api/spaces/%s/workitemlinktypes/%s", param0, param1)
}

// Update the given work item link type with given id.
func (c *Client) UpdateWorkItemLinkType(ctx context.Context, path string, payload *UpdateWorkItemLinkTypePayload) (*http.Response, error) {
	req, err := c.NewUpdateWorkItemLinkTypeRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateWorkItemLinkTypeRequest create the request corresponding to the update action endpoint of the work_item_link_type resource.
func (c *Client) NewUpdateWorkItemLinkTypeRequest(ctx context.Context, path string, payload *UpdateWorkItemLinkTypePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
