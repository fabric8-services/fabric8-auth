// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": userspace Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateUserspacePayload is the userspace create action payload.
type CreateUserspacePayload map[string]interface{}

// CreateUserspacePath computes a request path to the create action of userspace.
func CreateUserspacePath() string {

	return fmt.Sprintf("/api/userspace/*")
}

// Data dump endpoint
func (c *Client) CreateUserspace(ctx context.Context, path string, payload CreateUserspacePayload) (*http.Response, error) {
	req, err := c.NewCreateUserspaceRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUserspaceRequest create the request corresponding to the create action endpoint of the userspace resource.
func (c *Client) NewCreateUserspaceRequest(ctx context.Context, path string, payload CreateUserspacePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// ShowUserspacePath computes a request path to the show action of userspace.
func ShowUserspacePath() string {

	return fmt.Sprintf("/api/userspace/*")
}

// Data dump endpoint
func (c *Client) ShowUserspace(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowUserspaceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowUserspaceRequest create the request corresponding to the show action endpoint of the userspace resource.
func (c *Client) NewShowUserspaceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
