// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": UserService Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CleanUserServicePath computes a request path to the clean action of UserService.
func CleanUserServicePath() string {

	return fmt.Sprintf("/api/user/services")
}

// Clean the authenticated user tenant services
func (c *Client) CleanUserService(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCleanUserServiceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCleanUserServiceRequest create the request corresponding to the clean action endpoint of the UserService resource.
func (c *Client) NewCleanUserServiceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowUserServicePath computes a request path to the show action of UserService.
func ShowUserServicePath() string {

	return fmt.Sprintf("/api/user/services")
}

// Get the authenticated user tenant services
func (c *Client) ShowUserService(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowUserServiceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowUserServiceRequest create the request corresponding to the show action endpoint of the UserService resource.
func (c *Client) NewShowUserServiceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UpdateUserServicePath computes a request path to the update action of UserService.
func UpdateUserServicePath() string {

	return fmt.Sprintf("/api/user/services")
}

// Update the authenticated user tenant services
func (c *Client) UpdateUserService(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUpdateUserServiceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUserServiceRequest create the request corresponding to the update action endpoint of the UserService resource.
func (c *Client) NewUpdateUserServiceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
