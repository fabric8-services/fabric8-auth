// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"github.com/goadesign/goa"
	"net/http"
)

// Holds a single Area (default view)
//
// Identifier: application/vnd.area+json; view=default
type AreaSingle struct {
	Data *Area `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the AreaSingle media type instance.
func (mt *AreaSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeAreaSingle decodes the AreaSingle instance encoded in resp body.
func (c *Client) DecodeAreaSingle(resp *http.Response) (*AreaSingle, error) {
	var decoded AreaSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of Areas (default view)
//
// Identifier: application/vnd.arealist+json; view=default
type AreaList struct {
	Data []*Area `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the AreaList media type instance.
func (mt *AreaList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAreaList decodes the AreaList instance encoded in resp body.
func (c *Client) DecodeAreaList(resp *http.Response) (*AreaList, error) {
	var decoded AreaList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JWT Token (default view)
//
// Identifier: application/vnd.authtoken+json; view=default
type AuthToken struct {
	Token *TokenData `form:"token" json:"token" xml:"token"`
}

// Validate validates the AuthToken media type instance.
func (mt *AuthToken) Validate() (err error) {
	if mt.Token == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}
	return
}

// DecodeAuthToken decodes the AuthToken instance encoded in resp body.
func (c *Client) DecodeAuthToken(resp *http.Response) (*AuthToken, error) {
	var decoded AuthToken
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AuthTokenCollection is the media type for an array of AuthToken (default view)
//
// Identifier: application/vnd.authtoken+json; type=collection; view=default
type AuthTokenCollection []*AuthToken

// Validate validates the AuthTokenCollection media type instance.
func (mt AuthTokenCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAuthTokenCollection decodes the AuthTokenCollection instance encoded in resp body.
func (c *Client) DecodeAuthTokenCollection(resp *http.Response) (AuthTokenCollection, error) {
	var decoded AuthTokenCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Holds a single codebase (default view)
//
// Identifier: application/vnd.codebase+json; view=default
type CodebaseSingle struct {
	Data *Codebase `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the CodebaseSingle media type instance.
func (mt *CodebaseSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeCodebaseSingle decodes the CodebaseSingle instance encoded in resp body.
func (c *Client) DecodeCodebaseSingle(resp *http.Response) (*CodebaseSingle, error) {
	var decoded CodebaseSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of codebases (default view)
//
// Identifier: application/vnd.codebaselist+json; view=default
type CodebaseList struct {
	Data []*Codebase `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}     `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks      `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *CodebaseListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the CodebaseList media type instance.
func (mt *CodebaseList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCodebaseList decodes the CodebaseList instance encoded in resp body.
func (c *Client) DecodeCodebaseList(resp *http.Response) (*CodebaseList, error) {
	var decoded CodebaseList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of a single comment (default view)
//
// Identifier: application/vnd.comment+json; view=default
type CommentSingle struct {
	Data *Comment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the CommentSingle media type instance.
func (mt *CommentSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeCommentSingle decodes the CommentSingle instance encoded in resp body.
func (c *Client) DecodeCommentSingle(resp *http.Response) (*CommentSingle, error) {
	var decoded CommentSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of comments (default view)
//
// Identifier: application/vnd.commentlist+json; view=default
type CommentList struct {
	Data []*Comment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}    `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks     `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *CommentListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the CommentList media type instance.
func (mt *CommentList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCommentList decodes the CommentList instance encoded in resp body.
func (c *Client) DecodeCommentList(resp *http.Response) (*CommentList, error) {
	var decoded CommentList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of comments (default view)
//
// Identifier: application/vnd.commentrelationshiplist+json; view=default
type CommentRelationshipList struct {
	Data []*Comment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}    `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *GenericLinks    `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *CommentListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the CommentRelationshipList media type instance.
func (mt *CommentRelationshipList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCommentRelationshipList decodes the CommentRelationshipList instance encoded in resp body.
func (c *Client) DecodeCommentRelationshipList(resp *http.Response) (*CommentRelationshipList, error) {
	var decoded CommentRelationshipList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the create data for a comment (default view)
//
// Identifier: application/vnd.createsingle+json; view=default
type CreateSingleSingle struct {
	Data *CreateComment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the CreateSingleSingle media type instance.
func (mt *CreateSingleSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeCreateSingleSingle decodes the CreateSingleSingle instance encoded in resp body.
func (c *Client) DecodeCreateSingleSingle(resp *http.Response) (*CreateSingleSingle, error) {
	var decoded CreateSingleSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds filter information (default view)
//
// Identifier: application/vnd.filter+json; view=default
type FilterSingle struct {
	Data *Filters `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the FilterSingle media type instance.
func (mt *FilterSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeFilterSingle decodes the FilterSingle instance encoded in resp body.
func (c *Client) DecodeFilterSingle(resp *http.Response) (*FilterSingle, error) {
	var decoded FilterSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of Filters (default view)
//
// Identifier: application/vnd.filterlist+json; view=default
type FilterList struct {
	Data []*Filters `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the FilterList media type instance.
func (mt *FilterList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeFilterList decodes the FilterList instance encoded in resp body.
func (c *Client) DecodeFilterList(resp *http.Response) (*FilterList, error) {
	var decoded FilterList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of iterations (default view)
//
// Identifier: application/vnd.iteration+json; view=default
type IterationSingle struct {
	Data *Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the IterationSingle media type instance.
func (mt *IterationSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeIterationSingle decodes the IterationSingle instance encoded in resp body.
func (c *Client) DecodeIterationSingle(resp *http.Response) (*IterationSingle, error) {
	var decoded IterationSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of iterations (default view)
//
// Identifier: application/vnd.iterationlist+json; view=default
type IterationList struct {
	Data []*Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the IterationList media type instance.
func (mt *IterationList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeIterationList decodes the IterationList instance encoded in resp body.
func (c *Client) DecodeIterationList(resp *http.Response) (*IterationList, error) {
	var decoded IterationList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JSONAPIErrors media type (default view)
//
// Identifier: application/vnd.jsonapierrors+json; view=default
type JSONAPIErrors struct {
	Errors []*JSONAPIError `form:"errors" json:"errors" xml:"errors"`
}

// Validate validates the JSONAPIErrors media type instance.
func (mt *JSONAPIErrors) Validate() (err error) {
	if mt.Errors == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "errors"))
	}
	for _, e := range mt.Errors {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeJSONAPIErrors decodes the JSONAPIErrors instance encoded in resp body.
func (c *Client) DecodeJSONAPIErrors(resp *http.Response) (*JSONAPIErrors, error) {
	var decoded JSONAPIErrors
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// MarkupRenderingMediaType contains the
// 		rendering of the 'content' provided in the request, using
// 		the markup language specified by the 'markup' value. (default view)
//
// Identifier: application/vnd.markuprendering+json; view=default
type MarkupRenderingSingle struct {
	Data *MarkupRenderingData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the MarkupRenderingSingle media type instance.
func (mt *MarkupRenderingSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeMarkupRenderingSingle decodes the MarkupRenderingSingle instance encoded in resp body.
func (c *Client) DecodeMarkupRenderingSingle(resp *http.Response) (*MarkupRenderingSingle, error) {
	var decoded MarkupRenderingSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a search request (default view)
//
// Identifier: application/vnd.searchspacelist+json; view=default
type SearchSpaceList struct {
	Data []*Space `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks   `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *SpaceListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the SearchSpaceList media type instance.
func (mt *SearchSpaceList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSearchSpaceList decodes the SearchSpaceList instance encoded in resp body.
func (c *Client) DecodeSearchSpaceList(resp *http.Response) (*SearchSpaceList, error) {
	var decoded SearchSpaceList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a search request (default view)
//
// Identifier: application/vnd.searchworkitemlist+json; view=default
type SearchWorkItemList struct {
	Data []*WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the SearchWorkItemList media type instance.
func (mt *SearchWorkItemList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSearchWorkItemList decodes the SearchWorkItemList instance encoded in resp body.
func (c *Client) DecodeSearchWorkItemList(resp *http.Response) (*SearchWorkItemList, error) {
	var decoded SearchWorkItemList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single response to a space request (default view)
//
// Identifier: application/vnd.space+json; view=default
type SpaceSingle struct {
	Data *Space `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SpaceSingle media type instance.
func (mt *SpaceSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeSpaceSingle decodes the SpaceSingle instance encoded in resp body.
func (c *Client) DecodeSpaceSingle(resp *http.Response) (*SpaceSingle, error) {
	var decoded SpaceSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a space list request (default view)
//
// Identifier: application/vnd.spacelist+json; view=default
type SpaceList struct {
	Data []*Space `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks   `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *SpaceListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the SpaceList media type instance.
func (mt *SpaceList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSpaceList decodes the SpaceList instance encoded in resp body.
func (c *Client) DecodeSpaceList(resp *http.Response) (*SpaceList, error) {
	var decoded SpaceList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// The status of the current running instance (default view)
//
// Identifier: application/vnd.status+json; view=default
type Status struct {
	// The time when built
	BuildTime string `form:"buildTime" json:"buildTime" xml:"buildTime"`
	// Commit SHA this build is based on
	Commit string `form:"commit" json:"commit" xml:"commit"`
	// The error if any
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// The time when started
	StartTime string `form:"startTime" json:"startTime" xml:"startTime"`
}

// Validate validates the Status media type instance.
func (mt *Status) Validate() (err error) {
	if mt.Commit == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "commit"))
	}
	if mt.BuildTime == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "buildTime"))
	}
	if mt.StartTime == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "startTime"))
	}
	return
}

// DecodeStatus decodes the Status instance encoded in resp body.
func (c *Client) DecodeStatus(resp *http.Response) (*Status, error) {
	var decoded Status
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Tracker configuration (default view)
//
// Identifier: application/vnd.tracker+json; view=default
type Tracker struct {
	// unique id per tracker
	ID string `form:"id" json:"id" xml:"id"`
	// Type of the tracker
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the tracker
	URL string `form:"url" json:"url" xml:"url"`
}

// Validate validates the Tracker media type instance.
func (mt *Tracker) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}
	return
}

// DecodeTracker decodes the Tracker instance encoded in resp body.
func (c *Client) DecodeTracker(resp *http.Response) (*Tracker, error) {
	var decoded Tracker
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// TrackerCollection is the media type for an array of Tracker (default view)
//
// Identifier: application/vnd.tracker+json; type=collection; view=default
type TrackerCollection []*Tracker

// Validate validates the TrackerCollection media type instance.
func (mt TrackerCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeTrackerCollection decodes the TrackerCollection instance encoded in resp body.
func (c *Client) DecodeTrackerCollection(resp *http.Response) (TrackerCollection, error) {
	var decoded TrackerCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Tracker query with schedule (default view)
//
// Identifier: application/vnd.trackerquery+json; view=default
type TrackerQuery struct {
	// unique id per installation
	ID string `form:"id" json:"id" xml:"id"`
	// Search query
	Query         string                     `form:"query" json:"query" xml:"query"`
	Relationships *TrackerQueryRelationships `form:"relationships" json:"relationships" xml:"relationships"`
	// Schedule for fetch and import
	Schedule string `form:"schedule" json:"schedule" xml:"schedule"`
	// Tracker ID
	TrackerID string `form:"trackerID" json:"trackerID" xml:"trackerID"`
}

// Validate validates the TrackerQuery media type instance.
func (mt *TrackerQuery) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Query == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "query"))
	}
	if mt.Schedule == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "schedule"))
	}
	if mt.TrackerID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "trackerID"))
	}
	if mt.Relationships == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "relationships"))
	}
	if mt.Relationships != nil {
		if err2 := mt.Relationships.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeTrackerQuery decodes the TrackerQuery instance encoded in resp body.
func (c *Client) DecodeTrackerQuery(resp *http.Response) (*TrackerQuery, error) {
	var decoded TrackerQuery
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// TrackerQueryCollection is the media type for an array of TrackerQuery (default view)
//
// Identifier: application/vnd.trackerquery+json; type=collection; view=default
type TrackerQueryCollection []*TrackerQuery

// Validate validates the TrackerQueryCollection media type instance.
func (mt TrackerQueryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeTrackerQueryCollection decodes the TrackerQueryCollection instance encoded in resp body.
func (c *Client) DecodeTrackerQueryCollection(resp *http.Response) (TrackerQueryCollection, error) {
	var decoded TrackerQueryCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// WIT User Update (default view)
//
// Identifier: application/vnd.updateuser+json; view=default
type UpdateUser struct {
	Data *UpdateUserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the UpdateUser media type instance.
func (mt *UpdateUser) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeUpdateUser decodes the UpdateUser instance encoded in resp body.
func (c *Client) DecodeUpdateUser(resp *http.Response) (*UpdateUser, error) {
	var decoded UpdateUser
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of user idenitity IDs for updating list of user IDs (default view)
//
// Identifier: application/vnd.updateuseridlist+json; view=default
type UpdateUserIDList struct {
	Data []*UpdateUserID `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the UpdateUserIDList media type instance.
func (mt *UpdateUserIDList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUpdateUserIDList decodes the UpdateUserIDList instance encoded in resp body.
func (c *Client) DecodeUpdateUserIDList(resp *http.Response) (*UpdateUserIDList, error) {
	var decoded UpdateUserIDList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// WIT User Identity (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	Data *UserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeUser decodes the User instance encoded in resp body.
func (c *Client) DecodeUser(resp *http.Response) (*User, error) {
	var decoded User
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// User Array (default view)
//
// Identifier: application/vnd.user-array+json; view=default
type UserArray struct {
	Data []*UserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the UserArray media type instance.
func (mt *UserArray) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserArray decodes the UserArray instance encoded in resp body.
func (c *Client) DecodeUserArray(resp *http.Response) (*UserArray, error) {
	var decoded UserArray
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a user list request (default view)
//
// Identifier: application/vnd.userlist+json; view=default
type UserList struct {
	Data []*UserData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks  `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *UserListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the UserList media type instance.
func (mt *UserList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserList decodes the UserList instance encoded in resp body.
func (c *Client) DecodeUserList(resp *http.Response) (*UserList, error) {
	var decoded UserList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single Tenant (default view)
//
// Identifier: application/vnd.userservice+json; view=default
type UserServiceSingle struct {
	Data *UserService `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the UserServiceSingle media type instance.
func (mt *UserServiceSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeUserServiceSingle decodes the UserServiceSingle instance encoded in resp body.
func (c *Client) DecodeUserServiceSingle(resp *http.Response) (*UserServiceSingle, error) {
	var decoded UserServiceSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A work item holds field values according to a given field type in JSONAPI form (default view)
//
// Identifier: application/vnd.workitem+json; view=default
type WorkItemSingle struct {
	Data *WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemSingle media type instance.
func (mt *WorkItemSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemSingle decodes the WorkItemSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemSingle(resp *http.Response) (*WorkItemSingle, error) {
	var decoded WorkItemSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds values for work item reorder (default view)
//
// Identifier: application/vnd.workitemjson; view=default
type WorkItemReorder struct {
	Data []*WorkItem `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// Validate validates the WorkItemReorder media type instance.
func (mt *WorkItemReorder) Validate() (err error) {
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeWorkItemReorder decodes the WorkItemReorder instance encoded in resp body.
func (c *Client) DecodeWorkItemReorder(resp *http.Response) (*WorkItemReorder, error) {
	var decoded WorkItemReorder
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Defines a connection between two work items (default view)
//
// Identifier: application/vnd.workitemlink+json; view=default
type WorkItemLinkSingle struct {
	Data *WorkItemLinkData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}      `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinkLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemLinkSingle media type instance.
func (mt *WorkItemLinkSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkSingle decodes the WorkItemLinkSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkSingle(resp *http.Response) (*WorkItemLinkSingle, error) {
	var decoded WorkItemLinkSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// WorkItemLinkCategory puts a category on a link between two work items.
// The category is attached to a work item link type. A link type can have a
// category like "system", "extension", or "user". Those categories are handled
// by this media type. (default view)
//
// Identifier: application/vnd.workitemlinkcategory+json; view=default
type WorkItemLinkCategorySingle struct {
	Data *WorkItemLinkCategoryData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}              `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinkCategoryLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemLinkCategorySingle media type instance.
func (mt *WorkItemLinkCategorySingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkCategorySingle decodes the WorkItemLinkCategorySingle instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkCategorySingle(resp *http.Response) (*WorkItemLinkCategorySingle, error) {
	var decoded WorkItemLinkCategorySingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item link category list request (default view)
//
// Identifier: application/vnd.workitemlinkcategorylist+json; view=default
type WorkItemLinkCategoryList struct {
	Data []*WorkItemLinkCategoryData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}                 `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Meta     *WorkItemLinkCategoryListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemLinkCategoryList media type instance.
func (mt *WorkItemLinkCategoryList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Meta != nil {
		if err2 := mt.Meta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkCategoryList decodes the WorkItemLinkCategoryList instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkCategoryList(resp *http.Response) (*WorkItemLinkCategoryList, error) {
	var decoded WorkItemLinkCategoryList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item link list request (default view)
//
// Identifier: application/vnd.workitemlinklist+json; view=default
type WorkItemLinkList struct {
	Data []*WorkItemLinkData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}         `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Meta     *WorkItemLinkListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemLinkList media type instance.
func (mt *WorkItemLinkList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Meta != nil {
		if err2 := mt.Meta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkList decodes the WorkItemLinkList instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkList(resp *http.Response) (*WorkItemLinkList, error) {
	var decoded WorkItemLinkList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Defines the type of link between two work items. (default view)
//
// Identifier: application/vnd.workitemlinktype+json; view=default
type WorkItemLinkTypeSingle struct {
	Data *WorkItemLinkTypeData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}          `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinkTypeLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemLinkTypeSingle media type instance.
func (mt *WorkItemLinkTypeSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkTypeSingle decodes the WorkItemLinkTypeSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkTypeSingle(resp *http.Response) (*WorkItemLinkTypeSingle, error) {
	var decoded WorkItemLinkTypeSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item link type list request (default view)
//
// Identifier: application/vnd.workitemlinktypelist+json; view=default
type WorkItemLinkTypeList struct {
	Data []*WorkItemLinkTypeData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Meta     *WorkItemLinkTypeListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemLinkTypeList media type instance.
func (mt *WorkItemLinkTypeList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Meta != nil {
		if err2 := mt.Meta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkTypeList decodes the WorkItemLinkTypeList instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkTypeList(resp *http.Response) (*WorkItemLinkTypeList, error) {
	var decoded WorkItemLinkTypeList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item list request (default view)
//
// Identifier: application/vnd.workitemlist+json; view=default
type WorkItemList struct {
	Data []*WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemList media type instance.
func (mt *WorkItemList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeWorkItemList decodes the WorkItemList instance encoded in resp body.
func (c *Client) DecodeWorkItemList(resp *http.Response) (*WorkItemList, error) {
	var decoded WorkItemList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A work item type describes the values a work item type instance can hold. (default view)
//
// Identifier: application/vnd.workitemtype+json; view=default
type WorkItemTypeSingle struct {
	Data *WorkItemTypeData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}      `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemTypeLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemTypeSingle media type instance.
func (mt *WorkItemTypeSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemTypeSingle decodes the WorkItemTypeSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemTypeSingle(resp *http.Response) (*WorkItemTypeSingle, error) {
	var decoded WorkItemTypeSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Group of the work-item-types (default view)
//
// Identifier: application/vnd.workitemtypegroupsigle+json; view=default
type WorkItemTypeGroupSigleSingle struct {
	Data *WorkItemTypeGroupData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}           `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemTypeGroupLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemTypeGroupSigleSingle media type instance.
func (mt *WorkItemTypeGroupSigleSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemTypeGroupSigleSingle decodes the WorkItemTypeGroupSigleSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemTypeGroupSigleSingle(resp *http.Response) (*WorkItemTypeGroupSigleSingle, error) {
	var decoded WorkItemTypeGroupSigleSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item type list request (default view)
//
// Identifier: application/vnd.workitemtypelist+json; view=default
type WorkItemTypeList struct {
	Data []*WorkItemTypeData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}         `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks          `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemTypeListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemTypeList media type instance.
func (mt *WorkItemTypeList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeWorkItemTypeList decodes the WorkItemTypeList instance encoded in resp body.
func (c *Client) DecodeWorkItemTypeList(resp *http.Response) (*WorkItemTypeList, error) {
	var decoded WorkItemTypeList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of workspaces related to a codebase (default view)
//
// Identifier: application/vnd.workspacelist+json; view=default
type WorkspaceList struct {
	Data []*Workspace `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}       `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkspaceEditLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkspaceList media type instance.
func (mt *WorkspaceList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeWorkspaceList decodes the WorkspaceList instance encoded in resp body.
func (c *Client) DecodeWorkspaceList(resp *http.Response) (*WorkspaceList, error) {
	var decoded WorkspaceList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JSONAPI store for the links of a workspace.  See also http://jsonapi.org/format/#document-resource-object (default view)
//
// Identifier: application/vnd.workspaceopen+json; view=default
type WorkspaceOpen struct {
	Links *WorkspaceOpenLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// DecodeWorkspaceOpen decodes the WorkspaceOpen instance encoded in resp body.
func (c *Client) DecodeWorkspaceOpen(resp *http.Response) (*WorkspaceOpen, error) {
	var decoded WorkspaceOpen
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JSONAPI store Che Server state.  See also http://jsonapi.org/format/#document-resource-object (default view)
//
// Identifier: cheserverstate; view=default
type CheServerState struct {
	// Che server state
	Running *bool `form:"running,omitempty" json:"running,omitempty" xml:"running,omitempty"`
}

// DecodeCheServerState decodes the CheServerState instance encoded in resp body.
func (c *Client) DecodeCheServerState(resp *http.Response) (*CheServerState, error) {
	var decoded CheServerState
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
