// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": planner_backlog Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
	"strconv"
)

// ListPlannerBacklogPath computes a request path to the list action of planner_backlog.
func ListPlannerBacklogPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/backlog", param0)
}

// List backlog work items.
func (c *Client) ListPlannerBacklog(ctx context.Context, path string, filter *string, filterArea *string, filterAssignee *string, filterWorkitemtype *uuid.UUID, pageLimit *int, pageOffset *string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewListPlannerBacklogRequest(ctx, path, filter, filterArea, filterAssignee, filterWorkitemtype, pageLimit, pageOffset, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPlannerBacklogRequest create the request corresponding to the list action endpoint of the planner_backlog resource.
func (c *Client) NewListPlannerBacklogRequest(ctx context.Context, path string, filter *string, filterArea *string, filterAssignee *string, filterWorkitemtype *uuid.UUID, pageLimit *int, pageOffset *string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if filter != nil {
		values.Set("filter", *filter)
	}
	if filterArea != nil {
		values.Set("filter[area]", *filterArea)
	}
	if filterAssignee != nil {
		values.Set("filter[assignee]", *filterAssignee)
	}
	if filterWorkitemtype != nil {
		tmp4 := filterWorkitemtype.String()
		values.Set("filter[workitemtype]", tmp4)
	}
	if pageLimit != nil {
		tmp5 := strconv.Itoa(*pageLimit)
		values.Set("page[limit]", tmp5)
	}
	if pageOffset != nil {
		values.Set("page[offset]", *pageOffset)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	return req, nil
}
