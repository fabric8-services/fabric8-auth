// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "wit": search Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth/wit
// --pkg=witservice
// --version=v1.2.0

package witservice

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ShowSearchPath computes a request path to the show action of search.
func ShowSearchPath() string {

	return fmt.Sprintf("/api/search")
}

// Search by ID, URL, full text capability
func (c *Client) ShowSearch(ctx context.Context, path string, filterExpression *string, filterParentexists *bool, pageLimit *int, pageOffset *string, q *string, spaceID *string) (*http.Response, error) {
	req, err := c.NewShowSearchRequest(ctx, path, filterExpression, filterParentexists, pageLimit, pageOffset, q, spaceID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowSearchRequest create the request corresponding to the show action endpoint of the search resource.
func (c *Client) NewShowSearchRequest(ctx context.Context, path string, filterExpression *string, filterParentexists *bool, pageLimit *int, pageOffset *string, q *string, spaceID *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if filterExpression != nil {
		values.Set("filter[expression]", *filterExpression)
	}
	if filterParentexists != nil {
		tmp6 := strconv.FormatBool(*filterParentexists)
		values.Set("filter[parentexists]", tmp6)
	}
	if pageLimit != nil {
		tmp7 := strconv.Itoa(*pageLimit)
		values.Set("page[limit]", tmp7)
	}
	if pageOffset != nil {
		values.Set("page[offset]", *pageOffset)
	}
	if q != nil {
		values.Set("q", *q)
	}
	if spaceID != nil {
		values.Set("spaceID", *spaceID)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// SpacesSearchPath computes a request path to the spaces action of search.
func SpacesSearchPath() string {

	return fmt.Sprintf("/api/search/spaces")
}

// Search for spaces by name or description
func (c *Client) SpacesSearch(ctx context.Context, path string, q string, pageLimit *int, pageOffset *string) (*http.Response, error) {
	req, err := c.NewSpacesSearchRequest(ctx, path, q, pageLimit, pageOffset)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSpacesSearchRequest create the request corresponding to the spaces action endpoint of the search resource.
func (c *Client) NewSpacesSearchRequest(ctx context.Context, path string, q string, pageLimit *int, pageOffset *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("q", q)
	if pageLimit != nil {
		tmp8 := strconv.Itoa(*pageLimit)
		values.Set("page[limit]", tmp8)
	}
	if pageOffset != nil {
		values.Set("page[offset]", *pageOffset)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UsersSearchPath computes a request path to the users action of search.
func UsersSearchPath() string {

	return fmt.Sprintf("/api/search/users")
}

// Search by fullname
func (c *Client) UsersSearch(ctx context.Context, path string, q string, pageLimit *int, pageOffset *string) (*http.Response, error) {
	req, err := c.NewUsersSearchRequest(ctx, path, q, pageLimit, pageOffset)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUsersSearchRequest create the request corresponding to the users action endpoint of the search resource.
func (c *Client) NewUsersSearchRequest(ctx context.Context, path string, q string, pageLimit *int, pageOffset *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("q", q)
	if pageLimit != nil {
		tmp9 := strconv.Itoa(*pageLimit)
		values.Set("page[limit]", tmp9)
	}
	if pageOffset != nil {
		values.Set("page[offset]", *pageOffset)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
