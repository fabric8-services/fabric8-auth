kind: Template
apiVersion: v1
parameters:
- name: DOCKER_REPO
  required: true
- name: IMAGE_NAME
  required: true
- name: IMAGE_TAG
  required: true
- name: REPLICAS
  required: true
  value: '1'
- name: ENVIRONMENT
  value: dev
- name: SERVICE_NAME
  required: true
  value: auth
- name: MEMORY_LIMIT
  required: true
  value: 1.5Gi
metadata:
  name: ${SERVICE_NAME}
objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      belongsTo: ${SERVICE_NAME}
      env: ${ENVIRONMENT}
      service: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    replicas: ${{REPLICAS}}
    selector:
      service: ${SERVICE_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          service: ${SERVICE_NAME}
          version: ${IMAGE_TAG}
      spec:
        containers:
        - image: ${DOCKER_REPO}/${IMAGE_NAME}:dev
          env:
          - name: AUTH_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}
                key: db.host
          - name: AUTH_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}
                key: db.port
          - name: AUTH_DEVELOPER_MODE_ENABLED
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}
                key: developer.mode.enabled
          - name: AUTH_WIT_URL
            valueFrom:
              configMapKeyRef:
                name: ${SERVICE_NAME}
                key: wit.url
          name: ${SERVICE_NAME}
          ports:
          - containerPort: 8089
            protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/status
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/status
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 0.1m
              memory: 10Mi
            limits:
              cpu: 400m
              memory: ${MEMORY_LIMIT}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
  status:
    details:
      causes:
      - type: ConfigChange
- kind: Service
  apiVersion: v1
  metadata:
    name: ${SERVICE_NAME}
    labels:
      belongsTo: ${SERVICE_NAME}
      env: ${ENVIRONMENT}
      service: ${SERVICE_NAME}
  spec:
    ports:
      - name: "8089"
        protocol: TCP
        port: 80
        targetPort: 8089
    selector:
      service: ${SERVICE_NAME}
    type: ClusterIP
    sessionAffinity: null
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      service: ${SERVICE_NAME}
      belongsTo: ${SERVICE_NAME}
      env: ${ENVIRONMENT}
    name: ${SERVICE_NAME}
  spec:
    host: ''
    port:
      targetPort: "8089"
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
    wildcardPolicy: None
  status: {}
